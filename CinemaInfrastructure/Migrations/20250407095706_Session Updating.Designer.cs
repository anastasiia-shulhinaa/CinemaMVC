// <auto-generated />
using System;
using CinemaInfrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaInfrastructure.Migrations
{
    [DbContext(typeof(DbcinemaContext))]
    [Migration("20250407095706_Session Updating")]
    partial class SessionUpdating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "MovieId")
                        .HasName("PK_CategoryMovies_1");

                    b.HasIndex("MovieId");

                    b.ToTable("CategoryMovies", (string)null);
                });

            modelBuilder.Entity("CinemaDomain.Model.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("CinemaDomain.Model.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("BookingDate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte[]>("IsPrivateBooking")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("binary(50)")
                        .IsFixedLength();

                    b.Property<int?>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrivateBookingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CinemaDomain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CinemaDomain.Model.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalCinemaHalls")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cinema", (string)null);
                });

            modelBuilder.Entity("CinemaDomain.Model.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("CinemaDomain.Model.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("CinemaDomain.Model.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrailerLink")
                        .HasMaxLength(2050)
                        .HasColumnType("nvarchar(2050)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaDomain.Model.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("CinemaDomain.Model.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("CinemaDomain.Model.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .IsFixedLength();

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CinemaDomain.Model.SessionSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionSeats");
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActors", (string)null);
                });

            modelBuilder.Entity("MovieDirector", b =>
                {
                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("DirectorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieDirectors", (string)null);
                });

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.HasOne("CinemaDomain.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryMovies_Categories");

                    b.HasOne("CinemaDomain.Model.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryMovies_Movies1");
                });

            modelBuilder.Entity("CinemaDomain.Model.Booking", b =>
                {
                    b.HasOne("CinemaDomain.Model.Session", "Session")
                        .WithMany("Bookings")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Sessions");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CinemaDomain.Model.Hall", b =>
                {
                    b.HasOne("CinemaDomain.Model.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK_Halls_Cinema");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("CinemaDomain.Model.Schedule", b =>
                {
                    b.HasOne("CinemaDomain.Model.Hall", "Hall")
                        .WithMany("Schedules")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Halls");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("CinemaDomain.Model.Seat", b =>
                {
                    b.HasOne("CinemaDomain.Model.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Seats_Halls");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("CinemaDomain.Model.Session", b =>
                {
                    b.HasOne("CinemaDomain.Model.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Sessions_Movies");

                    b.HasOne("CinemaDomain.Model.Schedule", "Schedule")
                        .WithMany("Sessions")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Sessions_Schedules");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("CinemaDomain.Model.SessionSeat", b =>
                {
                    b.HasOne("CinemaDomain.Model.Booking", "Booking")
                        .WithMany("SessionSeats")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_SessionSeats_Bookings");

                    b.HasOne("CinemaDomain.Model.Seat", "Seat")
                        .WithMany("SessionSeats")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK_SessionSeats_Seats");

                    b.HasOne("CinemaDomain.Model.Session", "Session")
                        .WithMany("SessionSeats")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK_SessionSeats_Sessions");

                    b.Navigation("Booking");

                    b.Navigation("Seat");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.HasOne("CinemaDomain.Model.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieActors_Actors");

                    b.HasOne("CinemaDomain.Model.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieActors_Movies");
                });

            modelBuilder.Entity("MovieDirector", b =>
                {
                    b.HasOne("CinemaDomain.Model.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieDirectors_Directors");

                    b.HasOne("CinemaDomain.Model.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieDirectors_Movies");
                });

            modelBuilder.Entity("CinemaDomain.Model.Booking", b =>
                {
                    b.Navigation("SessionSeats");
                });

            modelBuilder.Entity("CinemaDomain.Model.Cinema", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("CinemaDomain.Model.Hall", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CinemaDomain.Model.Movie", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("CinemaDomain.Model.Schedule", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("CinemaDomain.Model.Seat", b =>
                {
                    b.Navigation("SessionSeats");
                });

            modelBuilder.Entity("CinemaDomain.Model.Session", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("SessionSeats");
                });
#pragma warning restore 612, 618
        }
    }
}
