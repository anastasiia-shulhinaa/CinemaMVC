@model IEnumerable<CinemaDomain.Model.Movie>

<main class="container my-5">
    <h1 class="text-center mb-5 section-title">Каталог Фільмів</h1>

    <!-- Filter Section -->
    <form id="filtersForm" class="filter-section row g-3 align-items-end mb-5 p-4 rounded shadow-sm">
        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="categoryDropdown" class="form-label small mb-1">Категорія</label>
                <select class="form-select" id="categoryDropdown" name="category" onchange="updateMovies()">
                    <option value="">Всі категорії</option>
                    @if (ViewBag.Categories != null)
                    {
                        foreach (var cat in ViewBag.Categories)
                        {
                            <option value="@cat">@cat</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="yearDropdown" class="form-label small mb-1">Рік</label>
                <select class="form-select" id="yearDropdown" name="year" onchange="updateMovies()">
                    <option value="">Всі роки</option>
                    @if (ViewBag.Years != null)
                    {
                        foreach (var y in ViewBag.Years)
                        {
                            <option value="@y">@y</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="ratingDropdown" class="form-label small mb-1">Рейтинг</label>
                <select class="form-select" id="ratingDropdown" name="rating" onchange="updateMovies()">
                    <option value="">Всі рейтинги</option>
                    @if (ViewBag.Ratings != null)
                    {
                        foreach (var r in ViewBag.Ratings)
                        {
                            <option value="@r">@r</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="titleSearch" class="form-label small mb-1">Пошук за назвою</label>
                <div class="input-group">
                    <input type="text" class="form-control title-search" id="titleSearch" name="title" placeholder="Назва фільму" oninput="debouncedUpdateMovies()">
                    <button type="button" class="btn btn-primary search-btn" aria-label="Пошук" onclick="updateMovies()">
                        <img src="https://www.palladium-cinema.com.ua/desktop/img/search.svg" alt="Search Icon" class="search-icon" />
                    </button>
                </div>
            </div>
        </div>
    </form>

    <!-- Movies List -->
    <div id="moviesList">
        @await Html.PartialAsync("_MoviesListPartial", Model)
    </div>
</main>



<script>
    function updateMovies() {
        const form = document.getElementById('filtersForm');
        const formData = new FormData(form);
        const params = new URLSearchParams(formData).toString();

        fetch(`/Movies/Filter?${params}`, {
            method: 'GET',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('moviesList').innerHTML = html;
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }

    function debounce(func, delay) {
        let timer;
        return function () {
            clearTimeout(timer);
            timer = setTimeout(() => func.apply(this, arguments), delay);
        };
    }

    const debouncedUpdateMovies = debounce(updateMovies, 300);
</script>