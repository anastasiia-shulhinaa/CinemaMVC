@model IEnumerable<CinemaDomain.Model.Movie>

<main class="container my-5">
    <h1 class="text-center mb-5 section-title">Каталог Фільмів</h1>

    <!-- Filter Section -->
    <form id="filtersForm" class="filter-section row g-3 align-items-end mb-5 p-4 rounded shadow-sm">
        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="categoryDropdown" class="form-label small mb-1">Категорія</label>
                <select class="form-select" id="categoryDropdown" name="category" onchange="updateMovies()">
                    <option value="">Всі категорії</option>
                    @if (ViewBag.Categories != null)
                    {
                        foreach (var cat in ViewBag.Categories)
                        {
                            <option value="@cat">@cat</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="yearDropdown" class="form-label small mb-1">Рік</label>
                <select class="form-select" id="yearDropdown" name="year" onchange="updateMovies()">
                    <option value="">Всі роки</option>
                    @if (ViewBag.Years != null)
                    {
                        foreach (var y in ViewBag.Years)
                        {
                            <option value="@y">@y</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="ratingDropdown" class="form-label small mb-1">Рейтинг</label>
                <select class="form-select" id="ratingDropdown" name="rating" onchange="updateMovies()">
                    <option value="">Всі рейтинги</option>
                    @if (ViewBag.Ratings != null)
                    {
                        foreach (var r in ViewBag.Ratings)
                        {
                            <option value="@r">@r</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="titleSearch" class="form-label small mb-1">Пошук за назвою</label>
                <div class="input-group">
                    <input type="text" class="form-control title-search" id="titleSearch" name="title" placeholder="Назва фільму" oninput="debouncedUpdateMovies()">
                    <button type="button" class="btn btn-primary search-btn" aria-label="Пошук" onclick="updateMovies()">
                        <img src="https://www.palladium-cinema.com.ua/desktop/img/search.svg" alt="Search Icon" class="search-icon" />
                    </button>
                </div>
            </div>
        </div>
    </form>

    <!-- Movies List -->
    <div id="moviesList">
        @await Html.PartialAsync("_MoviesListPartial", Model)
    </div>
</main>

<style>
    /* General Styles */
    .container {
        max-width: 1400px;
    }

    .section-title {
        color: #800020;
        font-weight: 700;
        font-size: 2.5rem;
        letter-spacing: 1px;
        text-transform: uppercase;
        margin-bottom: 2rem;
        position: relative;
    }

        .section-title::after {
            content: '';
            width: 80px;
            height: 4px;
            background-color: #800020;
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 2px;
        }

    /* Filter Section */
    .filter-section {
        background-color: #fefefe; /* Off-white background */
        border: 1px solid #e5e5e5; /* Very light grey border */
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-group {
        margin-bottom: 0;
    }

    .form-label {
        color: #800020; /* Accent color for labels */
        font-size: 0.85rem;
        font-weight: 500;
    }

    .form-select {
        border: 1px solid #d1d1d1; /* Light grey border */
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        color: #800020; /* Accent color for the selected option */
        background-color: #fff;
        transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .form-select:focus {
            border-color: #800020;
            box-shadow: 0 0 0 0.2rem rgba(128, 0, 32, 0.15);
            outline: none;
        }

        /* Style the dropdown options */
        .form-select option {
            color: #800020; /* Accent color for dropdown options */
            background-color: #fff; /* White background for options */
        }

            .form-select option:checked {
                color: #800020;
                background-color: #f0e4d7; /* Light beige background for selected option */
                font-weight: 500;
            }

            .form-select option:hover {
                background-color: #f0e4d7; /* Light beige on hover */
            }

    /* Style the search input */
    .input-group .title-search {
        border: 1px solid #d1d1d1; /* Light grey border */
        border-radius: 8px 0 0 8px; /* Rounded corners on the left side */
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        color: #800020; /* Accent color for typed text */
        background-color: #fff;
        transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .input-group .title-search::placeholder {
            color: #b88b8b; /* Lighter shade of the accent color for placeholder */
            opacity: 1; /* Ensure placeholder color is not faded */
        }

        .input-group .title-search:focus {
            border-color: #800020;
            box-shadow: 0 0 0 0.2rem rgba(128, 0, 32, 0.15);
            outline: none;
        }

        .input-group .title-search:hover {
            border-color: #800020;
        }

    .btn-primary {
        background-color: #800020;
        border-color: #800020;
        color: #fff;
        border-radius: 0 8px 8px 0; /* Rounded corners on the right side */
        padding: 0.5rem;
        font-weight: 500;
        transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
    }

        .btn-primary:hover {
            background-color: #660018;
            border-color: #660018;
            transform: scale(1.05);
        }

    .search-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem;
        width: 40px;
        height: 40px;
    }

    .search-icon {
        width: 20px;
        height: 20px;
        filter: brightness(0) invert(1); /* White icon */
    }

    @@media (max-width: 767px) {
        .filter-section {
            padding: 1.5rem;
        }

        .filter-group {
            margin-bottom: 1rem;
        }

        .search-btn {
            width: 36px;
            height: 36px;
        }

        .search-icon {
            width: 18px;
            height: 18px;
        }
    }
</style>

<script>
    function updateMovies() {
        const form = document.getElementById('filtersForm');
        const formData = new FormData(form);
        const params = new URLSearchParams(formData).toString();

        fetch(`/Movies/Filter?${params}`, {
            method: 'GET',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('moviesList').innerHTML = html;
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }

    function debounce(func, delay) {
        let timer;
        return function () {
            clearTimeout(timer);
            timer = setTimeout(() => func.apply(this, arguments), delay);
        };
    }

    const debouncedUpdateMovies = debounce(updateMovies, 300);
</script>