@model CinemaInfrastructure.ViewModels.BookingFormModel

@{
    ViewData["Title"] = "Бронювання квитків";
    // Extract YouTube video ID and construct embed link
    var videoId = Model.Movie.TrailerLink?.Contains("v=") == true ? Model.Movie.TrailerLink.Split("v=")[1] : null;
    var embedLink = videoId != null ? $"https://www.youtube.com/embed/{videoId}" : null;
}

<section class="film-page py-4">
    <div class="container">
        <h2 class="section-title mb-3">@Model.Movie.Title <span class="badge rating-badge px-3 py-2 rounded-pill fs-6">⭐ @Model.Movie.Rating</span></h2>

        @if (!string.IsNullOrEmpty(Model.Movie.Language))
        {
            <div class="film-name-translate">@Model.Movie.Language</div>
        }
        <div class="mt-2">
            <a href="@Url.Action("Index", "Movies")" class="btn btn-secondary">Розклад <i class="fas fa-arrow-right ms-2"></i></a>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-9 col-md-12">
            <div class="video mb-4 position-relative">
                <div class="embed-responsive embed-responsive-16by9">
                    @if (!string.IsNullOrEmpty(embedLink))
                    {
                        <iframe class="embed-responsive-item" id="TrailerPreview"
                                src="@embedLink"
                                frameborder="0"
                                allowfullscreen
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                referrerpolicy="strict-origin-when-cross-origin"
                                title="@Model.Movie.Title | Офіційний трейлер">
                        </iframe>
                    }
                    else
                    {
                        <div class="no-trailer-placeholder">
                            <p>Трейлер недоступний</p>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-4">
                <h4 class="section-title mb-3">Доступні дати показу</h4>
                <div class="date-film-slider d-flex flex-wrap gap-2">
                    @foreach (var date in Model.AvailableTimes.Select(t => t.StartTime.Date).Distinct().OrderBy(d => d))
                    {
                        <div class="date-item @((date == Model.AvailableTimes.First().StartTime.Date) ? "active" : "")"
                             data-date="@date.ToString("yyyy-MM-dd")">
                            <div class="number-day">@date.Day</div>
                            <div class="day">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetShortestDayName(date.DayOfWeek)</div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-4">
                <div class="tabs-content">
                    <input type="hidden" id="SessionId" name="SessionId" value="" />
                    @foreach (var timeGroup in Model.AvailableTimes.GroupBy(t => t.StartTime.Date))
                    {
                        <ul class="time-list @(timeGroup.Key == Model.AvailableTimes.First().StartTime.Date ? "active" : "")"
                            data-date="@timeGroup.Key.ToString("yyyy-MM-dd")">
                            @foreach (var item in timeGroup.OrderBy(t => t.StartTime.TimeOfDay))
                            {
                                <li>
                                    <a href="#" data-session-id="@item.SessionId" data-start-time="@item.StartTime.ToString("HH:mm")">
                                        @item.StartTime.ToString("HH:mm")
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <div class="about-film mt-4">
                <h3 class="section-title">Опис фільму</h3>
                <div class="description">@Model.Movie.Description</div>
            </div>
        </div>

        <div class="col-lg-3 col-md-12">
            <div class="poster mb-3">
                <img id="PosterPreview" src="@Model.Movie.BannerUrl" class="img-fluid rounded shadow" alt="Постер фільму @Model.Movie.Title" />
            </div>

            <div class="detail-info card shadow-sm p-3">
                <p><strong>Мова:</strong> @Model.Movie.Language</p>
                <p><strong>Тривалість:</strong> @Model.Movie.Duration хв</p>
                <p>
                    <strong>Жанр:</strong>
                    @if (Model.Movie.Categories != null && Model.Movie.Categories.Any())
                    {
                        @string.Join(", ", Model.Movie.Categories.Select(c => c.Name))
                    }
                    else
                    {
                        @:Не вказано
                    }
                </p>
                <p>
                    <strong>Режисер:</strong>
                    @if (Model.Movie.Directors != null && Model.Movie.Directors.Any())
                    {
                        @string.Join(", ", Model.Movie.Directors.Select(d => d.FullName))
                    }
                    else
                    {
                        @:Не вказано
                    }
                </p>
                <p>
                    <strong>Актори:</strong>
                    @if (Model.Movie.Actors != null && Model.Movie.Actors.Any())
                    {
                        @string.Join(", ", Model.Movie.Actors.Take(5).Select(a => a.FullName))
                        @if (Model.Movie.Actors.Count() > 5)
                        {
                            <span>...</span>
                        }
                    }
                    else
                    {
                        @:Не вказано
                    }
                </p>
            </div>
        </div>
    </div>

    <div class="mt-5">
        <h2 class="section-title mb-4">Виберіть місця</h2>
        <div id="seatsArea">
            @if (Model.SessionSeats != null && Model.SessionSeats.Any())
            {
                var seatCount = Model.SessionSeats.Count();
                var layoutRows = seatCount switch
                {
                    24 => new[] { 4, 6 }, // 4 rows of 6 seats
                    36 => new[] { 6, 6 }, // 6 rows of 6 seats
                    43 => new[] { 5, 8, 6 }, // 5 rows: 8 seats in first 3 rows, 6 seats in last 2 rows
                    _ => new[] { 5, 5 } // Default: 5 rows of 5 seats
                };

                <div class="cinema-seating">
                    <div class="screen-label text-center mb-3">Екран</div>
                    <div class="seat-grid">
                        @{
                            int currentSeatIndex = 0;
                            int rowNumber = 1;
                        }
                        @foreach (var seatsInRow in layoutRows)
                        {
                            <div class="seat-row mb-3">
                                <span class="row-label">Ряд @rowNumber</span>
                                <div class="seats-container d-flex justify-content-center gap-2">
                                    @for (int i = 0; i < seatsInRow; i++)
                                    {
                                        if (currentSeatIndex < Model.SessionSeats.Count())
                                        {
                                            var seat = Model.SessionSeats.ElementAt(currentSeatIndex);
                                            var disabled = seat.IsAvailable ? "" : "booked";
                                            <div class="seat @disabled" data-seat="@seat.SeatNumber" data-price="@seat.Price">
                                                @seat.SeatNumber
                                            </div>
                                            currentSeatIndex++;
                                        }
                                    }
                                </div>
                            </div>
                            rowNumber++;
                        }
                    </div>
                </div>
            }
            else
            {
                <p class="no-seats text-center">Оберіть час показу, щоб побачити доступні місця.</p>
            }
        </div>

        <div id="selectedSeatsInfo" class="mt-4 text-center">
            <p><strong>Обрані місця:</strong> <span id="selectedSeatsList"></span></p>
            <p><strong>Загальна вартість:</strong> <span id="totalPrice">0.00</span> грн</p>
        </div>

        <form asp-action="ConfirmBooking" method="post" id="bookingForm" class="text-center">
            <input type="hidden" name="SelectedSeats" id="SelectedSeatsInput" value="" />
            <input type="hidden" name="SessionId" id="SelectedSessionId" value="" />
            <button type="submit" class="btn btn-primary mt-3" disabled>Забронювати</button>
        </form>
    </div>
</section>

<style>
    /* General Styles */
    .film-page {
        background-color: #f8f9fa; /* Light background for the section */
    }

    .container {
        max-width: 1400px;
    }

    .section-title {
        color: #800020;
        font-weight: 700;
        font-size: 2rem;
        letter-spacing: 1px;
        text-transform: uppercase;
        position: relative;
    }

        .section-title::after {
            content: '';
            width: 60px;
            height: 4px;
            background-color: #800020;
            position: absolute;
            bottom: -10px;
            left: 0;
            border-radius: 2px;
        }

    .film-name-translate {
        color: #1a2a44;
        font-size: 1.1rem;
        margin-bottom: 1rem;
    }

    /* Video Section */
    .video {
        position: relative;
    }

    .embed-responsive {
        position: relative;
        display: block;
        width: 100%;
        padding: 0;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

        .embed-responsive::before {
            display: block;
            content: "";
            padding-top: 56.25%; /* 16:9 aspect ratio */
        }

        .embed-responsive .embed-responsive-item {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: 0;
        }

    .no-trailer-placeholder {
        width: 100%;
        height: 400px;
        background-color: #f0e4d7;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
        color: #800020;
        font-weight: 500;
        text-align: center;
    }

    /* Date and Time Selection */
    .date-item {
        background-color: #fefefe;
        border-radius: 8px;
        padding: 10px 12px;
        text-align: center;
        cursor: pointer;
        width: 60px;
        transition: background-color 0.3s, color 0.3s, transform 0.2s;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

        .date-item.active {
            background-color: #800020;
            color: white;
            transform: scale(1.05);
        }

        .date-item .number-day {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .date-item .day {
            font-size: 0.85rem;
            text-transform: uppercase;
        }

    .time-list {
        display: none;
        flex-wrap: wrap;
        gap: 10px;
        padding-left: 0;
        list-style: none;
    }

        .time-list.active {
            display: flex;
        }

        .time-list li a {
            display: inline-block;
            padding: 10px 16px;
            background-color: #fefefe;
            border-radius: 6px;
            font-weight: bold;
            text-decoration: none;
            color: #1a2a44;
            border: 1px solid #ddd;
            transition: background-color 0.2s, color 0.2s, transform 0.2s;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

            .time-list li a:hover {
                background-color: #d4af37;
                color: #1a2a44;
                transform: scale(1.05);
            }

            .time-list li a.selected {
                background-color: #800020;
                color: white;
                transform: scale(1.05);
            }

    /* Poster and Details */
    .poster img {
        width: 100%;
        height: auto;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .detail-info {
        background-color: #fefefe;
        border-radius: 12px;
    }

        .detail-info p {
            margin-bottom: 0.75rem;
            color: #1a2a44;
        }

        .detail-info strong {
            color: #800020;
            font-weight: 600;
        }

        .detail-info span {
            margin-right: 5px;
        }

    /* About Film */
    .about-film .description {
        color: #1a2a44;
        font-size: 1rem;
        line-height: 1.6;
    }

    /* Seating Area */
    .cinema-seating {
        position: relative;
        padding: 20px;
        background-color: #fefefe;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .screen-label {
        font-size: 1.2rem;
        font-weight: 600;
        color: #800020;
        padding: 10px;
        background-color: #f0e4d7;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .seat-grid {
        margin-top: 20px;
    }

    .seat-row {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .row-label {
        width: 60px;
        font-weight: 600;
        color: #800020;
        text-align: right;
    }

    .seats-container {
        flex: 1;
    }

    .seat {
        width: 40px;
        height: 40px;
        line-height: 40px;
        text-align: center;
        background-color: #4a7a7d; /* Muted teal for available seats */
        color: #fff;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s, transform 0.2s;
        font-size: 0.9rem;
    }

        .seat.booked {
            background-color: #e0e4d7; /* Light beige for booked seats */
            color: #1a2a44;
            cursor: not-allowed;
        }

        .seat.selected {
            background-color: #d4af37; /* Soft gold for selected seats */
            color: #1a2a44;
            transform: scale(1.1);
        }

        .seat:hover:not(.booked) {
            background-color: #800020;
            transform: scale(1.1);
        }

    .no-seats {
        color: #1a2a44;
        font-size: 1.1rem;
        padding: 1rem;
        background-color: #fefefe;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    /* Selected Seats Info */
    #selectedSeatsInfo p {
        font-size: 1.1rem;
        color: #1a2a44;
    }

    #selectedSeatsInfo strong {
        color: #800020;
    }

    /* Buttons */
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        text-transform: uppercase;
        transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
    }

    .btn-primary {
        background-color: #800020;
        border-color: #800020;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #660018;
            border-color: #660018;
            transform: scale(1.05);
        }

        .btn-primary:disabled {
            background-color: #e0e4d7;
            border-color: #e0e4d7;
            color: #1a2a44;
            cursor: not-allowed;
        }

    .btn-secondary {
        background-color: #4a7a7d;
        border-color: #4a7a7d;
        color: #fff;
    }

        .btn-secondary:hover {
            background-color: #3b6163;
            border-color: #3b6163;
            transform: scale(1.05);
        }

    .rating-badge {
        background-color: #d4af37 !important;
        color: #1a2a44 !important;
    }

    @@media (max-width: 767px) {
        .date-item {
            width: 50px;
        }

        .time-list li a {
            padding: 8px 12px;
            font-size: 0.9rem;
        }

        .seat {
            width: 35px;
            height: 35px;
            line-height: 35px;
            font-size: 0.8rem;
        }

        .row-label {
            width: 50px;
            font-size: 0.9rem;
        }

        .no-trailer-placeholder {
            height: 200px;
        }
    }
</style>

@section Scripts {
    <script>
        let selectedSeats = [];
        let totalPrice = 0;

        function updateSelectedSeatsInfo() {
            document.getElementById("selectedSeatsList").innerText = selectedSeats.join(', ');
            document.getElementById("totalPrice").innerText = totalPrice.toFixed(2);
            document.getElementById("SelectedSeatsInput").value = JSON.stringify(selectedSeats);
            const sessionId = document.getElementById("SelectedSessionId").value;
            document.querySelector('#bookingForm button[type="submit"]').disabled = selectedSeats.length === 0 || !sessionId;
        }

        function toggleSeat(event) {
            const seat = event.target;
            if (seat.classList.contains('booked')) return;

            const seatNumber = seat.dataset.seat;
            const seatPrice = parseFloat(seat.dataset.price);
            const isSelected = selectedSeats.includes(seatNumber);

            if (isSelected) {
                selectedSeats = selectedSeats.filter(s => s !== seatNumber);
                totalPrice -= seatPrice;
                seat.classList.remove('selected');
            } else {
                selectedSeats.push(seatNumber);
                totalPrice += seatPrice;
                seat.classList.add('selected');
            }

            updateSelectedSeatsInfo();
        }

        function showTimesForDate(date) {
            document.querySelectorAll('.time-list').forEach(list => {
                list.classList.toggle('active', list.dataset.date === date);
            });
            document.querySelectorAll('.time-list a').forEach(a => a.classList.remove('selected'));
            document.getElementById("seatsArea").innerHTML = "<p class='no-seats text-center'>Оберіть час показу, щоб побачити доступні місця.</p>";
            document.getElementById("SelectedSessionId").value = "";
            selectedSeats = [];
            totalPrice = 0;
            updateSelectedSeatsInfo();
        }

        function loadAvailableSeats(sessionId) {
            document.getElementById("SelectedSessionId").value = sessionId;
            selectedSeats = [];
            totalPrice = 0;
            updateSelectedSeatsInfo();

            // Fetch seats for the selected session
            fetch(`/Bookings/GetSeatsForSession?sessionId=${sessionId}`)
                .then(response => response.json())
                .then(seats => {
                    // Determine layout based on seat count
                    const seatCount = seats.length;
                    const layoutRows = seatCount === 24 ? [4, 6] : // 4 rows of 6 seats
                                     seatCount === 36 ? [6, 6] : // 6 rows of 6 seats
                                     seatCount === 43 ? [5, 8, 6] : // 5 rows: 8 seats in first 3 rows, 6 seats in last 2 rows
                                     [5, 5]; // Default: 5 rows of 5 seats

                    // Render seats
                    let html = `
                        <div class="cinema-seating">
                            <div class="screen-label text-center mb-3">Екран</div>
                            <div class="seat-grid">
                    `;
                    let currentSeatIndex = 0;
                    let rowNumber = 1;

                    layoutRows.forEach(seatsInRow => {
                        html += `
                            <div class="seat-row mb-3">
                                <span class="row-label">Ряд ${rowNumber}</span>
                                <div class="seats-container d-flex justify-content-center gap-2">
                        `;
                        for (let i = 0; i < seatsInRow; i++) {
                            if (currentSeatIndex < seats.length) {
                                const seat = seats[currentSeatIndex];
                                const disabled = seat.isAvailable ? "" : "booked";
                                html += `
                                    <div class="seat ${disabled}" data-seat="${seat.seatNumber}" data-price="${seat.price}">
                                        ${seat.seatNumber}
                                    </div>
                                `;
                                currentSeatIndex++;
                            }
                        }
                        html += `
                                </div>
                            </div>
                        `;
                        rowNumber++;
                    });

                    html += `
                            </div>
                        </div>
                    `;
                    document.getElementById("seatsArea").innerHTML = html;

                    // Add event listeners to new seats
                    document.querySelectorAll('.seat').forEach(seat => {
                        seat.addEventListener('click', toggleSeat);
                    });
                })
                .catch(() => {
                    document.getElementById("seatsArea").innerHTML = "<p class='text-danger text-center'>Не вдалося завантажити місця.</p>";
                });
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.date-item').forEach(item => {
                item.addEventListener('click', () => {
                    document.querySelectorAll('.date-item').forEach(d => d.classList.remove('active'));
                    item.classList.add('active');
                    showTimesForDate(item.dataset.date);
                });
            });

            document.querySelectorAll('.time-list a').forEach(a => {
                a.addEventListener('click', e => {
                    e.preventDefault();
                    document.querySelectorAll('.time-list a').forEach(el => el.classList.remove('selected'));
                    a.classList.add('selected');
                    loadAvailableSeats(a.dataset.sessionId);
                });
            });

            // Add event listeners to initial seats if any
            document.querySelectorAll('.seat').forEach(seat => {
                seat.addEventListener('click', toggleSeat);
            });
        });
    </script>
}