@model CinemaInfrastructure.ViewModels.BookingFormModel

@{
    ViewData["Title"] = "Бронювання квитків";
    var videoId = Model.Movie.TrailerLink.Split("v=")[1];
    // Construct the embed link
    var embedLink = $"https://www.youtube.com/embed/{videoId}";
}

<section class="film-page gray-bg py-4">
    <div class="container">

        <h2 class="mb-3">@Model.Movie.Title <span class="badge bg-primary px-3 py-2 rounded-pill fs-6">@Model.Movie.Rating</span></h2>

        @if (!string.IsNullOrEmpty(Model.Movie.Language))
        {
            <div class="film-name-translate">@Model.Movie.Language</div>
        }
        <div>
            <a href="@Url.Action("Index", "Movies")" class="button-empty">Розклад <span class="d-icon icon-next"></span></a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-9 col-md-12">
            <div class="video mb-4 position-relative">
                <div class="embed-responsive embed-responsive-16by9">
                    <iframe class="embed-responsive-item" id="TrailerPreview"
                            src="@embedLink" <!-- Use the embed link here -->
                        frameborder="0"
                        allowfullscreen
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                        referrerpolicy="strict-origin-when-cross-origin"
                        title="@Model.Movie.Title | Офіційний трейлер">
                    </iframe>
                </div>
            </div>
            <div class="mt-4">
                <h4 class="mb-3">Доступні дати показу</h4>
                <div class="date-film-slider d-flex flex-wrap gap-2">
                    @foreach (var date in Model.AvailableTimes.Select(t => t.StartTime.Date).Distinct().OrderBy(d => d))
                    {
                        <div class="date-item @((date == Model.AvailableTimes.First().StartTime.Date) ? "active" : "")"
                             data-date="@date.ToString("yyyy-MM-dd")">
                            <div class="number-day">@date.Day</div>
                            <div class="day">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetShortestDayName(date.DayOfWeek)</div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-4">
                <div class="tabs-content">
                    <input type="hidden" id="SessionId" name="SessionId" value="" />
                    @foreach (var timeGroup in Model.AvailableTimes.GroupBy(t => t.StartTime.Date))
                    {
                        <ul class="time-list @(timeGroup.Key == Model.AvailableTimes.First().StartTime.Date ? "active" : "")"
                            data-date="@timeGroup.Key.ToString("yyyy-MM-dd")">
                            @foreach (var item in timeGroup.OrderBy(t => t.StartTime.TimeOfDay))
                            {
                                <li>
                                    <a href="#" data-session-id="@item.SessionId" data-start-time="@item.StartTime.ToString("HH:mm")">
                                        @item.StartTime.ToString("HH:mm")
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <div class="about-film mt-4">
                <h3>Опис фільму</h3>
                <div class="description">@Model.Movie.Description</div>
            </div>
        </div>

        <div class="col-lg-3 col-md-12">
            <div class="poster mb-3">
                <img id="PosterPreview" src="@Model.Movie.BannerUrl" class="img-fluid" alt="Постер фільму @Model.Movie.Title" />
            </div>

            <div class="detail-info">
                <p><b>Мова: </b>@Model.Movie.Language</p>
                <p><b>Тривалість: </b>@Model.Movie.Duration</p>
                <p>
                    <b>Жанр: </b>
                    @foreach (var cat in Model.Movie.Categories)
                    {
                        <span>@cat.Name</span>
                    }
                </p>
                <p>
                    <b>Режисер: </b>
                    @foreach (var director in Model.Movie.Directors)
                    {
                        <span>@director.FullName</span>
                    }
                </p>
                <p>
                    <b>Актори: </b>
                    @foreach (var actor in Model.Movie.Actors.Take(5))
                    {
                        <span>@actor.FullName</span>
                    }
                    @if (Model.Movie.Actors.Count() > 5)
                    {
                        <span>...</span>
                    }
                </p>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h2>Виберіть місця</h2>
        <div id="seatsArea">
            @if (Model.SessionSeats != null)
            {
                <div class="seat-grid">
                    @foreach (var row in Model.SessionSeats.GroupBy(s => s.RowNumber))
                    {
                        <div class="seat-row mb-2">
                            <strong>Ряд @row.Key:</strong>
                            <div class="d-flex flex-wrap gap-1 mt-1">
                                @foreach (var seat in row.OrderBy(s => s.SeatNumber))
                                {
                                    var disabled = seat.IsAvailable ? "" : "booked"; // Use "booked" class if not available
                                    <div class="seat @disabled" data-seat="@seat.SeatNumber" data-price="@seat.Price">
                                        <!-- Include data-price attribute -->
                                        @seat.SeatNumber
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>Оберіть час показу, щоб побачити доступні місця.</p>
            }
        </div>

        <div id="selectedSeatsInfo" class="mt-3">
            <p>Обрані місця: <span id="selectedSeatsList"></span></p>
            <p>Загальна вартість: <span id="totalPrice">0.00</span> грн</p> <!-- Initialize total price to 0.00 -->
        </div>

        <form asp-action="ConfirmBooking" method="post" id="bookingForm">
            <input type="hidden" name="SelectedSeats" id="SelectedSeatsInput" value="" />
            <input type="hidden" name="SessionId" id="SelectedSessionId" value="" />
            <button type="submit" class="btn btn-primary mt-3" disabled>Забронювати</button>
        </form>
    </div>

</section>

<style>
    .video {
        position: relative;
    }

    .embed-responsive {
        position: relative;
        display: block;
        width: 100%;
        padding: 0;
        overflow: hidden;
    }

        .embed-responsive::before {
            display: block;
            content: "";
            padding-top: 56.25%; /* 16:9 aspect ratio */
        }

        .embed-responsive .embed-responsive-item {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: 0;
        }

    .date-item {
        background-color: #f5f5f5;
        border-radius: 8px;
        padding: 10px 12px;
        text-align: center;
        cursor: pointer;
        width: 52px;
        transition: background-color 0.3s, color 0.3s;
    }

        .date-item.active {
            background-color: #333;
            color: white;
        }

        .date-item .number-day {
            font-size: 16px;
            font-weight: bold;
        }

        .date-item .day {
            font-size: 12px;
        }

    .time-list {
        display: none;
        flex-wrap: wrap;
        gap: 10px;
        padding-left: 0;
        list-style: none;
    }

        .time-list.active {
            display: flex;
        }

        .time-list li a {
            display: inline-block;
            padding: 10px 16px;
            background-color: #f7f7f7;
            border-radius: 6px;
            font-weight: bold;
            text-decoration: none;
            color: #333;
            border: 1px solid #ddd;
            transition: background-color 0.2s;
        }

            .time-list li a:hover {
                background-color: #e0e0e0;
            }

            .time-list li a.selected {
                background-color: #333;
                color: white;
            }

    .booked {
        background-color: #e0e0e0; /* Indicate booked seats */
        cursor: not-allowed;
    }
</style>

@section Scripts {
    <script>
        let selectedSeats = [];
        let totalPrice = 0; // Initialize total price

        function updateSelectedSeatsInfo() {
            document.getElementById("selectedSeatsList").innerText = selectedSeats.join(', ');
            document.getElementById("totalPrice").innerText = totalPrice.toFixed(2); // Format total price to two decimal places
            document.getElementById("SelectedSeatsInput").value = JSON.stringify(selectedSeats);
            const sessionId = document.getElementById("SelectedSessionId").value;
            document.querySelector('#bookingForm button[type="submit"]').disabled = selectedSeats.length === 0 || !sessionId;
        }

        function toggleSeat(event) {
            const seat = event.target;
            if (seat.classList.contains('booked')) return; // Prevent selection of booked seats

            const seatNumber = seat.dataset.seat;
            const seatPrice = parseFloat(seat.dataset.price); // Get the price of the seat
            const isSelected = selectedSeats.includes(seatNumber);

            if (isSelected) {
                selectedSeats = selectedSeats.filter(s => s !== seatNumber);
                totalPrice -= seatPrice; // Decrease the total price
                seat.classList.remove('selected');
            } else {
                selectedSeats.push(seatNumber);
                totalPrice += seatPrice; // Increase the total price
                seat.classList.add('selected');
            }

            updateSelectedSeatsInfo();
        }

        function showTimesForDate(date) {
            document.querySelectorAll('.time-list').forEach(list => {
                list.classList.toggle('active', list.dataset.date === date);
            });

            document.querySelectorAll('.time-list a').forEach(a => a.classList.remove('selected'));
        }

        function loadAvailableSeats(sessionId) {
            document.getElementById("SelectedSessionId").value = sessionId;
            selectedSeats = [];
            totalPrice = 0; // Reset total price
            updateSelectedSeatsInfo();

            fetch(`/Bookings/GetSeatsForSession?sessionId=${sessionId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById("seatsArea").innerHTML = html;
                    document.querySelectorAll('.seat').forEach(seat => {
                        seat.addEventListener('click', toggleSeat);
                    });
                })
                .catch(() => {
                    document.getElementById("seatsArea").innerHTML = "<p class='text-danger'>Не вдалося завантажити місця.</p>";
                });
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.date-item').forEach(item => {
                item.addEventListener('click', () => {
                    document.querySelectorAll('.date-item').forEach(d => d.classList.remove('active'));
                    item.classList.add('active');
                    showTimesForDate(item.dataset.date);
                });
            });

            document.querySelectorAll('.time-list a').forEach(a => {
                a.addEventListener('click', e => {
                    e.preventDefault();
                    document.querySelectorAll('.time-list a').forEach(el => el.classList.remove('selected'));
                    a.classList.add('selected');
                    loadAvailableSeats(a.dataset.sessionId);
                });
            });
        });
    </script>
}
