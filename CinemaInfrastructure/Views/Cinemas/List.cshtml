@model IEnumerable<CinemaInfrastructure.ViewModels.CinemaViewModel>

@{
    ViewData["Title"] = "Список кінотеатрів - FILMix";
    var uniqueCities = Model.Select(c => c.Cinema.City).Distinct().ToList();
    var selectedCity = ViewData["CityFilter"]?.ToString() ?? "";
}

<main class="cinemas-container my-5">
    <h2 class="section-title">Список кінотеатрів</h2>

    <!-- Filter Section -->
    <div class="filter-section">
        <form id="filtersForm" class="filter-form row-list">
            <div class="input-group">
                <select class="form-control" id="cityDropdown" name="city" onchange="updateCinemas()" asp-items="@ViewBag.CitiesSelectList">
                    <option value="">Всі міста</option>
                </select>
                <button type="submit" class="filter-btn">Фільтрувати</button>
            </div>
        </form>
    </div>

    <!-- Cinemas List -->
    <div id="cinemasList">
        @if (!Model.Any())
        {
            <p class="text-muted">Наразі немає доступних кінотеатрів.</p>
        }
        else
        {
            <div class="row-list">
                @foreach (var cinemaViewModel in Model)
                {
                    var cinema = cinemaViewModel.Cinema;
                    <div class="cinema-card">
                        @if (!string.IsNullOrEmpty(cinema.PhotoUrl))
                        {
                            <img src="@cinema.PhotoUrl" class="card-img-top" alt="@cinema.Name" />
                        }
                        else
                        {
                            <div class="no-photo-placeholder">
                                <p class="text-muted">Фото відсутнє</p>
                            </div>
                        }
                        <div class="card-body">
                            <h5 class="card-title">@cinema.Name</h5>
                            <p class="card-text">
                                <strong>Місто:</strong> @cinema.City<br />
                                <strong>Адреса:</strong> @cinema.Address<br />
                                <strong>Телефон:</strong>
                                <a href="tel:+38@cinema.PhoneNumber" class="text-decoration-none">@cinema.PhoneNumber</a><br />
                                @if (!string.IsNullOrEmpty(cinema.Description))
                                {
                                    <strong>Опис:</strong> @cinema.Description

                                    <br />
                                }
                            </p>
                            @if (!string.IsNullOrEmpty(cinemaViewModel.GoogleMapsEmbedUrl))
                            {
                                <iframe src="@cinemaViewModel.GoogleMapsEmbedUrl" class="map-iframe w-100" allowfullscreen="" loading="lazy"></iframe>
                            }
                            <button class="btn-maroon select-cinema" data-id="@cinema.Id" data-name="@cinema.Name">Обрати кінотеатр</button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</main>

<style>
    /* Apply the new CSS */
    body {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        background-color: #fefefe;
        margin: 0;
        padding: 0;
        color: #333;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .cinemas-container {
        padding: 1.5rem;
        margin: 0 auto;
        width: 100%;
    }

    .section-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #800020;
        text-align: center;
        margin-bottom: 2rem;
        position: relative;
    }

        .section-title::after {
            content: '';
            width: 120px;
            height: 5px;
            background-color: #d4af37;
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 2px;
        }

    .text-muted {
        color: #666;
        text-align: center;
        font-size: 1.1rem;
        margin: 1rem 0;
    }

    /* Filter Section */
    .filter-section {
        background-color: #fff;
        border: 2px solid #800020;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 10px rgba(128, 0, 32, 0.1);
    }

    .filter-form .input-group {
        display: flex;
        gap: 0.5rem;
    }

    .form-control {
        border: 2px solid #ddd;
        border-radius: 6px;
        padding: 0.5rem;
        font-size: 1rem;
        background-color: #f9f2e7;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #800020;
            outline: none;
            box-shadow: 0 0 5px rgba(128, 0, 32, 0.3);
        }

    .filter-btn {
        background-color: #800020;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        transition: background-color 0.3s;
    }

        .filter-btn:hover {
            background-color: #660018;
        }

    /* Card Styling */
    .cinema-card {
        background-color: #fff9e6;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        height: 100%; /* Uniform height */
    }

        .cinema-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

    .card-img-top {
        height: 250px;
        object-fit: cover;
        width: 100%;
    }

    .no-photo-placeholder {
        height: 250px;
        background-color: #f0e4d7;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #800020;
        font-weight: 500;
    }

    .card-body {
        padding: 1.2rem;
        color: #800020;
        display: flex;
        flex-direction: column;
    }

    .card-title {
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .card-text {
        font-size: 1rem;
        color: #333;
        line-height: 1.5;
        flex-grow: 1;
    }

        .card-text strong {
            color: #800020;
        }

        .card-text a {
            color: #800020;
        }

    .map-iframe {
        border-radius: 8px;
        margin-top: 1rem;
        height: 150px;
        border: 0;
    }

    /* Button Styling */
    .btn-maroon {
        background-color: #800020;
        color: white;
        font-weight: 500;
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        transition: background-color 0.3s, transform 0.2s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        margin-top: auto; /* Push to bottom */
    }

        .btn-maroon:hover {
            background-color: #660018;
            transform: scale(1.05);
        }

    /* Row List for Filter and Cinemas */
    .row-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: center;
        margin: 0;
        padding: 0;
    }

        .row-list .cinema-card {
            flex: 1 1 300px;
            max-width: 350px;
        }

    /* Responsive Adjustments */
    @@media (max-width: 767px) {
        .cinemas-container

    {
        padding: 1rem;
    }

    .section-title {
        font-size: 2rem;
    }

    .filter-section {
        padding: 0.75rem;
    }

    .form-control {
        font-size: 0.9rem;
        padding: 0.4rem;
    }

    .filter-btn {
        font-size: 0.9rem;
        padding: 0.4rem 0.8rem;
    }

    .cinema-card {
        max-width: 100%;
    }

    .card-title {
        font-size: 1.2rem;
    }

    .card-text {
        font-size: 0.9rem;
    }

    .map-iframe {
        height: 120px;
    }

    .btn-maroon {
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
    }

    }
</style>

@section Scripts {
    <script>
        function updateCinemas() {
            const form = document.getElementById('filtersForm');
            const formData = new FormData(form);
            const params = new URLSearchParams(formData).toString();

            fetch(`/Cinemas/ListFilter?${params}`, {
                method: 'GET',
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('cinemasList').innerHTML = html;
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".select-cinema").forEach(button => {
                button.addEventListener("click", function () {
                    const cinemaId = this.getAttribute("data-id");
                    const cinemaName = this.getAttribute("data-name");
                    fetch(`/Home/SetCinemaFilter?cinemaId=${cinemaId}&cinemaName=${encodeURIComponent(cinemaName)}`, {
                        method: "POST"
                    })
                        .then(response => response.ok ? window.location.href = "/Home/Index" : Promise.reject())
                        .catch(error => console.error("Error:", error));
                });
            });
        });
    </script>
}