@model IEnumerable<CinemaInfrastructure.ViewModels.CinemaViewModel>

<main class="container my-5">
    <h1 class="text-center mb-5 section-title">Кінотеатри</h1>

    <!-- Display Notification -->
    @if (TempData["Notification"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show mb-4" role="alert">
            @TempData["Notification"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Filter Section -->
    <form id="filtersForm" class="filter-section row g-3 align-items-end mb-5 p-4 rounded shadow-sm">
        <div class="col-md-3 col-sm-6">
            <div class="filter-group">
                <label for="cityDropdown" class="form-label small mb-1">Місто</label>
                <select class="form-select" id="cityDropdown" name="city" onchange="updateCinemas()" asp-items="@ViewBag.CitiesSelectList">
                    <option value="">Всі міста</option>
                </select>
            </div>
        </div>
    </form>

    <!-- Cinemas List -->
    <div id="cinemasList">
        @await Html.PartialAsync("_CinemasListPartial", Model)
    </div>
</main>

<style>
    /* General Styles */
    .container {
        max-width: 1400px;
    }

    .section-title {
        color: #800020;
        font-weight: 700;
        font-size: 2.5rem;
        letter-spacing: 1px;
        text-transform: uppercase;
        margin-bottom: 2rem;
        position: relative;
    }

    .section-title::after {
        content: '';
        width: 80px;
        height: 4px;
        background-color: #800020;
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        border-radius: 2px;
    }

    /* Filter Section */
    .filter-section {
        background-color: #fefefe;
        border: 1px solid #e5e5e5;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-group {
        margin-bottom: 0;
    }

    .form-label {
        color: #800020;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .form-select {
        border: 1px solid #d1d1d1;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        color: #800020;
        background-color: #fff;
        transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .form-select:focus {
        border-color: #800020;
        box-shadow: 0 0 0 0.2rem rgba(128, 0, 32, 0.15);
        outline: none;
    }

    .form-select option {
        color: #800020;
        background-color: #fff;
    }

    .form-select option:checked {
        color: #800020;
        background-color: #f0e4d7;
        font-weight: 500;
    }

    .form-select option:hover {
        background-color: #f0e4d7;
    }

    @@media (max-width: 767px) {
        .filter-section {
            padding: 1.5rem;
        }

        .filter-group {
            margin-bottom: 1rem;
        }
    }
</style>

<script>
    function updateCinemas() {
        const form = document.getElementById('filtersForm');
        const formData = new FormData(form);
        const params = new URLSearchParams(formData).toString();

        fetch(`/Cinemas/Filter?${params}`, {
            method: 'GET',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('cinemasList').innerHTML = html;
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }
</script>